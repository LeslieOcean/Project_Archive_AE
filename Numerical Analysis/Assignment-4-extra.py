import numpy as np
import matplotlib.pyplot as plt

# Define the vector field components
def vector_field(x, y, B):
    """Compute the vector field components w_x and w_y."""
    r = np.sqrt(x**2 + y**2)  # Radius
    w_x = B - y / r           # Horizontal component
    w_y = x / r               # Vertical component
    return w_x, w_y

# Create a grid of points
x, y = np.linspace(-3, 3, 20), np.linspace(-3, 3, 20)
X, Y = np.meshgrid(x, y)

# Compute the vector fields for B = 0.5 and B = 1.5
B_values = [0.5, 1.5]
fields = [vector_field(X, Y, B) for B in B_values]

# Plot the vector fields
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
for i, (B, field) in enumerate(zip(B_values, fields)):
    W_x, W_y = field
    axes[i].quiver(X, Y, W_x, W_y, color="blue")
    axes[i].set_title(f"Vector Field w (B = {B})")
    axes[i].set_xlim(-3, 3)
    axes[i].set_ylim(-3, 3)
    axes[i].set_aspect('equal')
    axes[i].grid(True)

plt.tight_layout()
plt.show()

# import numpy as np
# import matplotlib.pyplot as plt

# # Define the vector field components
# def vector_field(x, y, B):
#     """Compute the vector field components w_x and w_y."""
#     r = np.sqrt(x**2 + y**2)  # Radius
#     r[r == 0] = 1e-10  # Avoid division by zero
#     w_x = B - y / r           # Horizontal component
#     w_y = x / r               # Vertical component
#     return w_x, w_y

# # Create a grid of points
# x, y = np.linspace(-3, 3, 20), np.linspace(-3, 3, 20)
# X, Y = np.meshgrid(x, y)

# # Compute the vector field for B = 1.5
# B = 1.5
# W_x, W_y = vector_field(X, Y, B)

# # Plot the vector fields separately
# fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# # Plot w_x as a vector field
# axes[0].quiver(X, Y, W_x, np.zeros_like(W_y), color="red")  # Only horizontal component
# axes[0].set_title(f"Vector Field $w_x$ (B = {B})")
# axes[0].set_xlim(-3, 3)
# axes[0].set_ylim(-3, 3)
# axes[0].set_aspect('equal')
# axes[0].grid(True)

# # Plot w_y as a vector field
# axes[1].quiver(X, Y, np.zeros_like(W_x), W_y, color="blue")  # Only vertical component
# axes[1].set_title(f"Vector Field $w_y$ (B = {B})")
# axes[1].set_xlim(-3, 3)
# axes[1].set_ylim(-3, 3)
# axes[1].set_aspect('equal')
# axes[1].grid(True)

# plt.tight_layout()
# plt.show()

# import numpy as np
# import matplotlib.pyplot as plt

# # Data
# nx = np.array([51, 61, 71, 81, 91, 111, 131, 151, 181, 281])
# time = np.array([2.41, 2.53, 2.8, 3.01, 3.29, 4.08, 4.83, 5.9, 7.64, 16.2])

# # Apply log transformation to 'time' for exponential regression
# log_time = np.log(time)

# # Perform linear regression on log-transformed data
# coefficients = np.polyfit(nx, log_time, 1)  # Linear fit for log(time)
# slope, intercept = coefficients

# # Compute the exponential model: time = a * exp(b * nx)
# a = np.exp(intercept)
# b = slope
# exponential_trend = a * np.exp(b * nx)

# # Print the equation of the exponential regression
# print(f"Exponential regression equation: y = {a:.4f} * exp({b:.4f} * x)")

# # Plot the data and exponential trendline
# plt.figure(figsize=(8, 6))
# plt.scatter(nx, time, color='b', label="Data points")
# plt.plot(nx, exponential_trend, color='r', linestyle='--', label=f"Trendline: y = {a:.4f} * exp({b:.4f} * x)")
# plt.title("Time vs. nx with Exponential Trendline")
# plt.xlabel("nx")
# plt.ylabel("Time (s)")
# plt.grid(True)
# plt.legend()
# plt.show()
# import numpy as np
# import matplotlib.pyplot as plt

# nx_61 = [0.582463, 0.496921, 0.487424, 0.612735, 0.738045, 0.863355, 0.988666,
#  1.11163 , 1.23164 , 1.35165 , 1.47166 , 1.59167 , 1.593729, 1.488896,
#  1.384062, 1.279229, 1.174395, 1.067374, 0.958934, 0.850494, 0.742054,
#  0.633613, 0.695072, 0.833389, 0.971706, 1.110023, 1.24834 , 1.373981,
#  1.495846, 1.61771 , 1.739575, 1.86144 , 1.766772, 1.634627, 1.502482,
#  1.370337, 1.238193, 1.110272, 0.982647, 0.855023, 0.727398, 0.604199,
#  0.74653 , 0.88886 , 1.031191, 1.173521, 1.31332 , 1.429909, 1.546498,
#  1.663087, 1.779676, 1.84753 , 1.693861, 1.540191, 1.386522, 1.232853,
#  1.083728, 0.947383, 0.811039, 0.674695, 0.538351, 0.496902, 0.636207,
#  0.775512, 0.914816, 1.054121, 1.179507, 1.286157, 1.392807, 1.499457,
#  1.606106, 1.576156, 1.414012, 1.251868, 1.089724, 0.92758 , 0.78375 ,
#  0.652637, 0.521525, 0.390412, 0.2593  , 0.304149, 0.434833, 0.565517,
#  0.696201, 0.826885, 0.929459, 1.022867, 1.116275, 1.209682, 1.30309 ,
#  1.189081, 1.034402, 0.879723, 0.725045, 0.570366, 0.453586, 0.340189,
#  0.226793, 0.113396]

# nx_71 = [0.67747 , 0.789297, 0.901125, 1.012775, 1.123635, 1.234496, 1.345356,
#  1.456216, 1.374128, 1.283527, 1.192926, 1.102326, 1.009059, 0.914818,
#  0.820578, 0.726337, 0.744991, 0.873402, 1.001814, 1.130225, 1.255972,
#  1.374924, 1.493875, 1.612827, 1.718413, 1.600137, 1.48186 , 1.363584,
#  1.245307, 1.127382, 1.009527, 0.891673, 0.773818, 0.811934, 0.951611,
#  1.091288, 1.230966, 1.363815, 1.485537, 1.607259, 1.728981, 1.809308,
#  1.663845, 1.518382, 1.372919, 1.227456, 1.090132, 0.953424, 0.816716,
#  0.680007, 0.742349, 0.888291, 1.034233, 1.180175, 1.313934, 1.434435,
#  1.554936, 1.675436, 1.723243, 1.557006, 1.390769, 1.224532, 1.058864,
#  0.912833, 0.766801, 0.62077 , 0.474738, 0.564566, 0.712323, 0.860081,
#  1.007838, 1.137244, 1.253223, 1.369201, 1.485179, 1.498422, 1.322634,
#  1.146847, 0.971059, 0.799342, 0.65567 , 0.511999, 0.368328, 0.224656,
#  0.34112 , 0.486035, 0.630951, 0.775866, 0.895779, 1.003712, 1.111644,
#  1.219577, 1.201282, 1.029147, 0.857011, 0.684876, 0.522117, 0.391588,
#  0.261059, 0.130529]

# nx_81 = [0.941069, 1.03641 , 1.131751, 1.227092, 1.273029, 1.201631, 1.130233,
#  1.058836, 0.984928, 0.909296, 0.833663, 0.758031, 0.849142, 0.961097,
#  1.073051, 1.183958, 1.290257, 1.396556, 1.502855, 1.511077, 1.413678,
#  1.316279, 1.218879, 1.119612, 1.019812, 0.920011, 0.836963, 0.963328,
#  1.089693, 1.216058, 1.337941, 1.452202, 1.566464, 1.680726, 1.634704,
#  1.508539, 1.382374, 1.256209, 1.132664, 1.009219, 0.885775, 0.830194,
#  0.968508, 1.106822, 1.245137, 1.373191, 1.493037, 1.612882, 1.732728,
#  1.619679, 1.466127, 1.312575, 1.160664, 1.018189, 0.875715, 0.733241,
#  0.71988 , 0.867911, 1.015943, 1.163974, 1.293747, 1.417131, 1.540514,
#  1.65284 , 1.477677, 1.302513, 1.127349, 0.959371, 0.805765, 0.652158,
#  0.498552, 0.539358, 0.694525, 0.849692, 1.004859, 1.131583, 1.256033,
#  1.380482, 1.43559 , 1.248004, 1.060419, 0.872833, 0.702033, 0.54682 ,
#  0.391607, 0.236395, 0.336845, 0.495401, 0.653957, 0.808453, 0.930473,
#  1.052493, 1.174513, 1.169763, 0.98062 , 0.791477, 0.602334, 0.442496,
#  0.294997, 0.147499]

# nx_91 = [1.071336, 1.149486, 1.110931, 1.059566, 1.008201, 0.954478, 0.899211,
#  0.843945, 0.834116, 0.926525, 1.018933, 1.111308, 1.200617, 1.289926,
#  1.379235, 1.351865, 1.277824, 1.203783, 1.128262, 1.050676, 0.973091,
#  0.917823, 1.024868, 1.131912, 1.238957, 1.339574, 1.43882 , 1.538065,
#  1.531592, 1.43041 , 1.329229, 1.227845, 1.125785, 1.023724, 0.921664,
#  1.028156, 1.14937 , 1.270583, 1.383671, 1.492135, 1.600598, 1.627725,
#  1.497423, 1.367122, 1.237019, 1.111241, 0.985463, 0.859685, 0.928948,
#  1.064182, 1.199415, 1.326574, 1.443886, 1.561198, 1.636124, 1.477926,
#  1.319728, 1.16153 , 1.013994, 0.868235, 0.722476, 0.741921, 0.890938,
#  1.039954, 1.182777, 1.308309, 1.433841, 1.559374, 1.387839, 1.206178,
#  1.024516, 0.857637, 0.698027, 0.538418, 0.498859, 0.660562, 0.822265,
#  0.981693, 1.113826, 1.245958, 1.378091, 1.252577, 1.054487, 0.856397,
#  0.673865, 0.507953, 0.342041, 0.239195, 0.41087 , 0.582544, 0.754219,
#  0.893834, 1.029491, 1.165148, 1.098152, 0.8923  , 0.686449, 0.492923,
#  0.328616, 0.164308]

# nx_111 = [0.921587, 0.901835, 0.882084, 0.885047, 0.941699, 0.998351, 1.054399,
#  1.110036, 1.165672, 1.143712, 1.112346, 1.080299, 1.045333, 1.010368,
#  1.02493 , 1.091772, 1.158614, 1.222832, 1.286325, 1.340572, 1.29002 ,
#  1.239468, 1.187564, 1.13344 , 1.079317, 1.114618, 1.192843, 1.271067,
#  1.343568, 1.415909, 1.448638, 1.37441 , 1.300182, 1.224764, 1.14844 ,
#  1.072116, 1.141011, 1.232597, 1.32278 , 1.405711, 1.488641, 1.486864,
#  1.38543 , 1.283997, 1.183434, 1.083152, 0.99411 , 1.101766, 1.209422,
#  1.312909, 1.408698, 1.504486, 1.453285, 1.322464, 1.191644, 1.066768,
#  0.942231, 0.878831, 1.005631, 1.132432, 1.250669, 1.361627, 1.472585,
#  1.355828, 1.194997, 1.035949, 0.888321, 0.740693, 0.721234, 0.869996,
#  1.018759, 1.152264, 1.280118, 1.399386, 1.209539, 1.019692, 0.836859,
#  0.668637, 0.500415, 0.544023, 0.716573, 0.889122, 1.03661 , 1.181886,
#  1.248988, 1.032711, 0.816433, 0.616138, 0.430984, 0.24583 , 0.370112,
#  0.566594, 0.759304, 0.920884, 1.082464, 1.081805, 0.843193, 0.604581,
#  0.394895, 0.197448]

# nx_131 = [0.903058, 0.93687 , 0.970409, 1.003645, 1.030152, 1.026663, 1.023174,
#  1.017416, 1.011386, 1.032254, 1.070825, 1.108818, 1.145538, 1.18109 ,
#  1.166818, 1.152547, 1.135832, 1.118227, 1.127959, 1.1721  , 1.21576 ,
#  1.256747, 1.297734, 1.278436, 1.249536, 1.218619, 1.186196, 1.177438,
#  1.2288  , 1.280163, 1.327089, 1.373981, 1.354614, 1.30716 , 1.258537,
#  1.208248, 1.171585, 1.232855, 1.294124, 1.350486, 1.405857, 1.393352,
#  1.323488, 1.253362, 1.182459, 1.111556, 1.180929, 1.25587 , 1.325667,
#  1.392951, 1.397927, 1.301961, 1.206184, 1.112268, 1.018351, 1.074511,
#  1.167833, 1.256006, 1.339261, 1.376296, 1.250763, 1.125229, 1.005818,
#  0.886858, 0.919237, 1.036294, 1.148603, 1.252139, 1.339687, 1.181403,
#  1.02312 , 0.874586, 0.728948, 0.723726, 0.870065, 1.012888, 1.14081 ,
#  1.268731, 1.106837, 0.913015, 0.731617, 0.558138, 0.498248, 0.679056,
#  0.859097, 1.014809, 1.170521, 1.039469, 0.807902, 0.589715, 0.387854,
#  0.253542, 0.473053, 0.692564, 0.882689, 1.068432, 0.989397, 0.718746,
#  0.459902, 0.229951]

# nx_151 = [0.934436, 0.952833, 0.963023, 0.972663, 0.981287, 0.995667, 1.020093,
#  1.04401 , 1.06709 , 1.083097, 1.088076, 1.092076, 1.094634, 1.106883,
#  1.132669, 1.157519, 1.181131, 1.193068, 1.190367, 1.18627 , 1.180512,
#  1.190491, 1.218201, 1.2445  , 1.269292, 1.275266, 1.262171, 1.24738 ,
#  1.230959, 1.239345, 1.270341, 1.299415, 1.32683 , 1.324632, 1.298175,
#  1.269984, 1.240447, 1.249041, 1.285687, 1.319833, 1.352237, 1.339142,
#  1.296046, 1.251613, 1.206345, 1.21838 , 1.264194, 1.30676 , 1.347518,
#  1.31997 , 1.256543, 1.192815, 1.128937, 1.149385, 1.209131, 1.264511,
#  1.317978, 1.271191, 1.183178, 1.096795, 1.011041, 1.046913, 1.126614,
#  1.200142, 1.271594, 1.199088, 1.081518, 0.968732, 0.857336, 0.917955,
#  1.024829, 1.122581, 1.218072, 1.111204, 0.958272, 0.814917, 0.673555,
#  0.770779, 0.91309 , 1.041599, 1.167754, 1.015313, 0.820338, 0.641903,
#  0.465708, 0.614062, 0.800881, 0.966765, 1.130508, 0.91846 , 0.673968,
#  0.4558  , 0.239499, 0.456145, 0.697011, 0.906526, 1.114743, 0.826219,
#  0.524178, 0.261823]

# nx_181 = [0.924673, 0.941561, 0.95975 , 0.977211, 0.994163, 1.009045, 1.023274,
#  1.036779, 1.053411, 1.070498, 1.086318, 1.100248, 1.11231 , 1.122704,
#  1.133913, 1.149968, 1.164945, 1.178967, 1.187756, 1.19525 , 1.200809,
#  1.211448, 1.226113, 1.238566, 1.248461, 1.251151, 1.252197, 1.25208 ,
#  1.264692, 1.277542, 1.28838 , 1.290068, 1.285987, 1.279099, 1.278187,
#  1.291636, 1.303193, 1.31369 , 1.301552, 1.288118, 1.272795, 1.277739,
#  1.292698, 1.304606, 1.304163, 1.28114 , 1.256481, 1.232832, 1.252037,
#  1.270001, 1.285948, 1.26413 , 1.227799, 1.190075, 1.178933, 1.206227,
#  1.230797, 1.247254, 1.194138, 1.140978, 1.087759, 1.107749, 1.14797 ,
#  1.184311, 1.168954, 1.093899, 1.020464, 0.96748 , 1.02893 , 1.087449,
#  1.142938, 1.065427, 0.962402, 0.863608, 0.863717, 0.955363, 1.03951 ,
#  1.076427, 0.934213, 0.797317, 0.664827, 0.769493, 0.900549, 1.021442,
#  0.961974, 0.76897 , 0.590985, 0.510141, 0.702382, 0.882375, 1.054277,
#  0.818048, 0.565402, 0.33124 , 0.41459 , 0.684549, 0.924339, 0.978445,
#  0.63047 , 0.308469]

# nx_251 = [0.925967, 0.943052, 0.95965 , 0.976423, 0.992564, 1.008715, 1.024566,
#  1.039938, 1.055488, 1.069976, 1.084773, 1.098831, 1.112604, 1.126228,
#  1.138836, 1.151906, 1.163664, 1.175494, 1.18669 , 1.19718 , 1.207975,
#  1.217151, 1.226728, 1.235074, 1.243214, 1.251157, 1.257784, 1.264787,
#  1.269958, 1.275612, 1.280469, 1.284427, 1.288311, 1.290357, 1.293522,
#  1.295212, 1.296346, 1.29674 , 1.295988, 1.296615, 1.295235, 1.29334 ,
#  1.290132, 1.286887, 1.284765, 1.280973, 1.275659, 1.268763, 1.263567,
#  1.259102, 1.252829, 1.243908, 1.233194, 1.227171, 1.221191, 1.211897,
#  1.198584, 1.184333, 1.179432, 1.173217, 1.159425, 1.140935, 1.125767,
#  1.122716, 1.118278, 1.096505, 1.071336, 1.058693, 1.060282, 1.058137,
#  1.023626, 0.989069, 0.986287, 0.99722 , 0.989617, 0.939975, 0.891273,
#  0.91323 , 0.940766, 0.915682, 0.842481, 0.787394, 0.846953, 0.902288,
#  0.833659, 0.723253, 0.690122, 0.798689, 0.90022 , 0.735629, 0.566417,
#  0.601414, 0.787983, 0.886299, 0.604106, 0.3426  , 0.539564, 0.848918,
#  0.854806, 0.412131]
# # Create an index array for plotting
# index = np.linspace(2.5, 3.0, len(nx_61))

# # Plotting the data
# plt.figure(figsize=(10, 6))
# plt.plot(index, nx_61, label="nx_61")
# #plt.plot(index, nx_71, label="nx_71")
# plt.plot(index, nx_81, label="nx_81")
# #plt.plot(index, nx_91, label="nx_91", marker='x', markersize=3)
# plt.plot(index, nx_111, label="nx_111")
# #plt.plot(index, nx_131, label="nx_131", marker='p', markersize=3)
# plt.plot(index, nx_151, label="nx_151")
# plt.plot(index, nx_181, label="nx_181")
# plt.plot(index, nx_251, label="nx_251")

# # Graph labels and title
# #plt.title("Variation of Values Across nx_61, nx_71, and nx_81")

# plt.xlabel("x")
# plt.ylabel("Values")
# plt.legend()
# plt.grid(True)
# plt.show()

# # for i in range(100):
# #     print(-3 + 6*i/100)	